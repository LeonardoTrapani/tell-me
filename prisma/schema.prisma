// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?
  image                    String?
  isPremium                Boolean                   @default(false)
  projects                 Project[]
  accounts                 Account[]
  sessions                 Session[]
  createdAt                DateTime                  @default(now())
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus StripeSubscriptionStatus?
}

model Project {
  id                 String     @id @default(cuid())
  name               String     @db.VarChar(75)
  description        String?
  message            String?
  backgroundColor    String?
  textColor          String?
  primaryColor       String?
  userId             String
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedbacks          Feedback[]
  orderBy            OrderBy    @default(createdAtDesc)
  customFilterDate   DateTime?
  averageRating      Float?
  createdAt          DateTime   @default(now())
  lastChildUpdatedAt DateTime   @default(now())
}

enum OrderBy {
  createdAtDesc
  createdAtAsc
  ratingDesc
  ratingAsc
}

model Feedback {
  id        String   @id @default(cuid())
  title     String?  @db.VarChar(50)
  content   String   @db.Text
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  rating    Int      @db.SmallInt
  author    String?  @db.VarChar(35)
  createdAt DateTime @default(now())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}
